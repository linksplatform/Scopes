{
  "api/Platform.Scopes.html": {
    "href": "api/Platform.Scopes.html",
    "title": "Namespace Platform.Scopes | LinksPlatform's Platform.Scopes Library",
    "keywords": "Namespace Platform.Scopes Classes Scope Represents the scope. Scope<TInclude> Represents the scope. Use<T> Represents the use."
  },
  "api/Platform.Scopes.Scope.html": {
    "href": "api/Platform.Scopes.Scope.html",
    "title": "Class Scope | LinksPlatform's Platform.Scopes Library",
    "keywords": "Class Scope Represents the scope. Inheritance Object Scope Scope<TInclude> Namespace : Platform.Scopes Assembly : Platform.Scopes.dll Syntax public class Scope : DisposableBase Constructors | Improve this Doc View Source Scope() Initializes a new Scope instance. Declaration public Scope() | Improve this Doc View Source Scope(Boolean) Initializes a new Scope instance. Declaration public Scope(bool autoInclude) Parameters Type Name Description Boolean autoInclude A auto include. | Improve this Doc View Source Scope(Boolean, Boolean) Initializes a new Scope instance. Declaration public Scope(bool autoInclude, bool autoExplore) Parameters Type Name Description Boolean autoInclude A auto include. Boolean autoExplore A auto explore. Fields | Improve this Doc View Source Global The auto explore. Declaration public static readonly Scope Global Field Value Type Description Scope Methods | Improve this Doc View Source Dispose(Boolean, Boolean) Disposes the manual. Declaration protected override void Dispose(bool manual, bool wasDisposed) Parameters Type Name Description Boolean manual The manual. Boolean wasDisposed The was disposed. | Improve this Doc View Source Exclude(Object) Excludes the object. Declaration public void Exclude(object object) Parameters Type Name Description Object object | Improve this Doc View Source Exclude<T>() Excludes this instance. Declaration public void Exclude<T>() Type Parameters Name Description T The . | Improve this Doc View Source ExcludeAssembly(Assembly) Excludes the assembly using the specified assembly. Declaration public void ExcludeAssembly(Assembly assembly) Parameters Type Name Description Assembly assembly The assembly. | Improve this Doc View Source ExcludeAssemblyOf<T>() Excludes the assembly of. Declaration public void ExcludeAssemblyOf<T>() Type Parameters Name Description T The . | Improve this Doc View Source ExcludeAssemblyOfType(Type) Excludes the assembly of type using the specified type. Declaration public void ExcludeAssemblyOfType(Type type) Parameters Type Name Description Type type The type. | Improve this Doc View Source Include(Object) Includes the object. Declaration public void Include(object object) Parameters Type Name Description Object object | Improve this Doc View Source Include<T>() Includes this instance. Declaration public void Include<T>() Type Parameters Name Description T The . | Improve this Doc View Source IncludeAssembly(Assembly) Includes the assembly using the specified assembly. Declaration public void IncludeAssembly(Assembly assembly) Parameters Type Name Description Assembly assembly The assembly. | Improve this Doc View Source IncludeAssemblyOf<T>() Includes the assembly of. Declaration public void IncludeAssemblyOf<T>() Type Parameters Name Description T The . | Improve this Doc View Source IncludeAssemblyOfType(Type) Includes the assembly of type using the specified type. Declaration public void IncludeAssemblyOfType(Type type) Parameters Type Name Description Type type The type. | Improve this Doc View Source SortConstructors(List<ConstructorInfo>) Sorts the constructors using the specified result constructors. Declaration protected virtual void SortConstructors(List<ConstructorInfo> resultConstructors) Parameters Type Name Description List < ConstructorInfo > resultConstructors The result constructors. | Improve this Doc View Source TryResolve(Type, out Object) Determines whether this instance try resolve. Declaration public bool TryResolve(Type requiredType, out object resolved) Parameters Type Name Description Type requiredType The required type. Object resolved The resolved. Returns Type Description Boolean The bool | Improve this Doc View Source TryResolve<T>(out T) Determines whether this instance try resolve. Declaration public bool TryResolve<T>(out T resolved) Parameters Type Name Description T resolved The resolved. Returns Type Description Boolean The result. Type Parameters Name Description T The . | Improve this Doc View Source TryResolveInstance(List<ConstructorInfo>, out Object) Determines whether this instance try resolve instance. Declaration protected virtual bool TryResolveInstance(List<ConstructorInfo> constructors, out object resolved) Parameters Type Name Description List < ConstructorInfo > constructors The constructors. Object resolved The resolved. Returns Type Description Boolean The bool | Improve this Doc View Source Use(Object) Uses the object. Declaration public void Use(object object) Parameters Type Name Description Object object | Improve this Doc View Source Use<T>() Declaration public T Use<T>() Returns Type Description T Type Parameters Name Description T Remarks TODO: Use Default[T].Instance if the only constructor object has is parameterless. TODO: Think of interface chaining IDoubletLinks[T] (default) -> IDoubletLinks[T] (checker) -> IDoubletLinks[T] (synchronizer) (may be UseChain[IDoubletLinks[T], Types[DefaultLinks, DefaultLinksDependencyChecker, DefaultSynchronizedLinks]] TODO: Add support for factories | Improve this Doc View Source UseAndReturn<T>(T) Uses the and return using the specified object. Declaration public T UseAndReturn<T>(T object) Parameters Type Name Description T object Returns Type Description T The object. Type Parameters Name Description T The . | Improve this Doc View Source UseSingleton<T>(IFactory<T>) Uses the singleton using the specified factory. Declaration public T UseSingleton<T>(IFactory<T> factory) Parameters Type Name Description IFactory <T> factory The factory. Returns Type Description T The Type Parameters Name Description T The . | Improve this Doc View Source UseSingleton<T>(Func<T>) Uses the singleton using the specified creator. Declaration public T UseSingleton<T>(Func<T> creator) Parameters Type Name Description Func <T> creator The creator. Returns Type Description T The Type Parameters Name Description T The ."
  },
  "api/Platform.Scopes.Scope-1.html": {
    "href": "api/Platform.Scopes.Scope-1.html",
    "title": "Class Scope<TInclude> | LinksPlatform's Platform.Scopes Library",
    "keywords": "Class Scope<TInclude> Represents the scope. Inheritance Object Scope Scope<TInclude> Inherited Members Scope.Global Scope.ExcludeAssemblyOf<T>() Scope.ExcludeAssemblyOfType(Type) Scope.ExcludeAssembly(Assembly) Scope.Exclude<T>() Scope.Exclude(Object) Scope.IncludeAssemblyOf<T>() Scope.IncludeAssemblyOfType(Type) Scope.IncludeAssembly(Assembly) Scope.Include<T>() Scope.Include(Object) Scope.Use<T>() Scope.UseSingleton<T>(IFactory<T>) Scope.UseSingleton<T>(Func<T>) Scope.UseAndReturn<T>(T) Scope.Use(Object) Scope.TryResolve<T>(T) Scope.TryResolve(Type, Object) Scope.SortConstructors(List<ConstructorInfo>) Scope.TryResolveInstance(List<ConstructorInfo>, Object) Scope.Dispose(Boolean, Boolean) Namespace : Platform.Scopes Assembly : Platform.Scopes.dll Syntax public class Scope<TInclude> : Scope Type Parameters Name Description TInclude Constructors | Improve this Doc View Source Scope() Initializes a new Scope instance. Declaration public Scope() | Improve this Doc View Source Scope(Boolean) Initializes a new Scope instance. Declaration public Scope(bool autoInclude) Parameters Type Name Description Boolean autoInclude A auto include. | Improve this Doc View Source Scope(Boolean, Boolean) Initializes a new Scope instance. Declaration public Scope(bool autoInclude, bool autoExplore) Parameters Type Name Description Boolean autoInclude A auto include. Boolean autoExplore A auto explore. See Also Scope"
  },
  "api/Platform.Scopes.Use-1.html": {
    "href": "api/Platform.Scopes.Use-1.html",
    "title": "Class Use<T> | LinksPlatform's Platform.Scopes Library",
    "keywords": "Class Use<T> Represents the use. Inheritance Object Use<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Platform.Scopes Assembly : Platform.Scopes.dll Syntax public static class Use<T> Type Parameters Name Description T Properties | Improve this Doc View Source New Gets the new value. Declaration public static Disposable<T> New { get; } Property Value Type Description Disposable <T> | Improve this Doc View Source Single Gets the single value. Declaration public static T Single { get; } Property Value Type Description T"
  },
  "README.html": {
    "href": "README.html",
    "title": "Scopes | LinksPlatform's Platform.Scopes Library",
    "keywords": "Scopes LinksPlatform's Platform.Scopes Class Library. Namespace: Platform.Scopes Forked from: LinksPlatform/Helpers/Scopes NuGet package: Platform.Scopes Documentation PDF file with code for e-readers. Depend on Platform.Singletons"
  }
}